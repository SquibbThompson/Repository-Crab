import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib.animation import PillowWriter
import matplotlib.colors as mcolors
from scipy.signal import convolve2d


# Initial grid setup
binary_string = """
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11011100101110111100010011010101111001101111011111000010001100101001110100101011011010111110
11111010101111101011110010010010110111011110000101001110101101111100011111110001000100010011 
11001010101001000111110010101001111000101001011101110010001111010110110010101010101100011000
11011111100011100011011111101101001010100101011110111110110010111111101001101110111011111000
11101010111100011111101111110011100111011000110001010000011111111010010100111000110110001000
11111110010101001101001011100111011100111001101011010010111011101111001001000111111101001000
11000100100111100010100101011000110001101011010011010110100011001001000111011001011000010010
11001101101101001011111011111010000011110111011101111001001000111100100100011010111101111011
11010110111110111001011001011111110100101001110001101101100101100001011110111101101011110111
10111000010100011110111110100110111011101111111010010001001011111110001010101011101110101101
11101001110101101100101010101011000100010000110000010110001111100010100001001001110011111010

""".strip()

initial_grid = np.array([[int(cell) for cell in row if cell in '01'] for row in binary_string.split('\n')])
original_grid = initial_grid.copy()
prerequisites_grid = np.zeros_like(initial_grid)

# Colors and colormap setup
colors = [(0.4, 0, 0), (1, 0, 0), (1, 0.5, 0), (1, 1, 0), (0, 1, 0), (0, 0, 1), (0.5, 0, 0.5)]
adjusted_colors = [(0, 0, 0) for _ in range(9)]

def get_active_criteria():
    """Prompts the user to define the activation criteria based on neighbor counts."""
    while True:
        criteria = input("Enter the active criteria (comma-separated values from 0 to 8): ").strip().split(',')
        criteria = [int(c) for c in criteria if c.isdigit() and 0 <= int(c) <= 8]
        if criteria:
            for index in criteria:
                adjusted_colors[index] = colors[index % len(colors)]
            return criteria
        else:
            print("Invalid input. Please enter values from 0 to 8.")




activation_matches = get_active_criteria()
# Define a static colormap based on the number of surrounding active cells
static_colors = [
    (0, 0, 0),        # 0 - Black
    (0.4, 0, 0),     # 1 - Dark Red
    (1, 0, 0),       # 2 - Red
    (1, 0.5, 0),     # 3 - Orange
    (1, 1, 0),       # 4 - Yellow
    (0, 1, 0),       # 5 - Green
    (0, 1, 1),       # 6 - Light Blue
    (0, 0, 1),       # 7 - Dark Blue
    (0.5, 0, 0.5)    # 8 - Purple
]

colormap_static = mcolors.LinearSegmentedColormap.from_list("", static_colors)


# Kernel for convolution
kernel = np.array([[1, 1, 1],
                   [1, 0, 1],
                   [1, 1, 1]])

def evolve_grid_convolutionally(grid, activation_matches):
    neighbor_counts = convolve2d(grid, kernel, mode='same', boundary='wrap')
    active_cells = (grid == 1) & (~np.isin(neighbor_counts, activation_matches))
    inactive_cells = (grid == 0) & (np.isin(neighbor_counts, activation_matches))
    
    new_grid = grid.copy()
    new_grid[active_cells] = 0
    new_grid[inactive_cells] = 1

    global prerequisites_grid
    prerequisites_grid = neighbor_counts

    # Apply Black Swan rules
    new_grid = apply_black_swan_rules(new_grid, black_swan_rules)

    return new_grid

# Define up to 8 Black Swan rules directly within the code
# Each rule is a tuple of two binary strings: (prerequisite pattern, outcome pattern)

# Example Black Swan Rule 1
bs1_prerequisite = """

111
101
111

"""
bs1_outcome = """
1000000000001
0100000000010
0010000000100
0001000001000
0000100010000
0000010100000
111111b111111
0000010100000
0000100010000
0001000001000
0010000000100
0100000000010
1000000000001
"""

bs2_prerequisite = """

000
010
000

"""
bs2_outcome = """
0111111111110
n01111111110n
nn011111110nn
nnn0111110nnn
nnnn01110nnnn
nnnnn010nnnnn
000000b000000
nnnnn010nnnnn
nnnn01110nnnn
nnn0111110nnn
nn011111110nn
n01111111110n
0111111111110
"""



# Convert these string rules to numpy arrays for easier processing
def string_to_array(bin_str):
    return np.array([[cell for cell in row if cell in '01bn'] for row in bin_str.strip().split('\n')])

black_swan_rules = [
    (string_to_array(bs1_prerequisite), string_to_array(bs1_outcome)),
    (string_to_array(bs2_prerequisite), string_to_array(bs2_outcome)) 
    # ... Add more rules as needed
]

def apply_black_swan_rules(grid, rules):
    n, m = grid.shape
    new_grid = grid.copy()
    black_swan_hits = np.zeros_like(grid, dtype=bool)

    for prerequisite, outcome in rules:
        r_n, r_m = prerequisite.shape

        for i in range(n - r_n + 1):
            for j in range(m - r_m + 1):
                section = grid[i:i+r_n, j:j+r_m]
                match = True

                # Check if the prerequisite matches the section
                for x in range(r_n):
                    for y in range(r_m):
                        if prerequisite[x, y] == 'n':
                            continue
                        elif prerequisite[x, y].isdigit() and section[x, y] != int(prerequisite[x, y]):
                            match = False
                            break

                    if not match:
                        break

                # If the prerequisite matches, apply the outcome
                if match:
                    for x in range(r_n):
                        for y in range(r_m):
                            if outcome[x, y] == 'b':
                                black_swan_hits[i+x, j+y] = True
                            elif outcome[x, y].isdigit():
                                new_grid[i+x, j+y] = int(outcome[x, y])

    # Handle intersections of Black Swan rules
    new_grid[black_swan_hits] = 1

    return new_grid

# Animation
iterations = 54

def corrected_animate(iteration):
    global initial_grid
    plt.clf()
    plt.imshow(prerequisites_grid, cmap=colormap_static, vmin=0, vmax=8)  # Use colormap_static here
    plt.axis('off')
    plt.title(f'Heatmap (Frame: {iteration})')
    initial_grid = evolve_grid_convolutionally(initial_grid, activation_matches)
    if iteration == iterations - 1:
        initial_grid = original_grid.copy()

fig = plt.figure(figsize=(19, 19))

ani = animation.FuncAnimation(fig, corrected_animate, frames=iterations, repeat=False)


# Save the animation as a GIF
#ani.save('Name.gif', writer=PillowWriter(fps=1.2))

plt.show()
